# Copyright (c) IBM Corporation 2024
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

---
# Tasks file for zmf_swmgmt_zos_system_uuid play.

# Create a variable for the z/OS system UUID response content.
- name: Initialize the container for the z/OS system UUID response content
  ansible.builtin.set_fact:
    zos_system_uuid_response: ""

# Set the request content body as an empty dictionary.
- name: "No request content specified for z/OS system UUID operation, using empty request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{}'
  when: remote_zmf_user is not defined and remote_zmf_password is not defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Including zosmfuid in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfuid":"{{ remote_zmf_user }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is not defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Including zosmfuid and zosmfpw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Including zosmfuid and proxyuid in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfuid":"{{ remote_zmf_user }}",
 "proxyuid":"{{ proxy_zmf_user }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is not defined and proxy_zmf_user is defined and proxy_zmf_password is not defined

- name: "Including zosmfuid and proxypw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfuid":"{{ remote_zmf_user }}",
 "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is not defined and proxy_zmf_user is not defined and proxy_zmf_password is defined

- name: "Including zosmfuid, zosmfpw, and proxyuid in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}", "proxyuid":"{{ proxy_zmf_user }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is defined and proxy_zmf_password is not defined

- name: "Including zosmfuid, zosmfpw, and proxypw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}", "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is not defined and proxy_zmf_password is defined

- name: "Including zosmfpw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfpw":"{{ remote_zmf_password }}"}'
  when: remote_zmf_password is defined and remote_zmf_user is not defined and proxy_zmf_user is not defined and proxy_zmf_password is not defined

- name: "Including zosmfpw and proxyuid in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfpw":"{{ remote_zmf_password }}",
  "proxyuid":"{{ proxy_zmf_user }}"}'
  when: remote_zmf_user is not defined and remote_zmf_password is defined and proxy_zmf_user is defined and proxy_zmf_password is not defined

- name: "Including zosmfpw and proxypw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfpw":"{{ remote_zmf_password }}",
  "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is not defined and remote_zmf_password is defined and proxy_zmf_user is not defined and proxy_zmf_password is defined

- name: "Including proxyuid in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"proxyuid":"{{ proxy_zmf_user }}"}'
  when: proxy_zmf_user is defined and remote_zmf_user is not defined and remote_zmf_password is not defined and proxy_zmf_password is not defined

- name: "Including proxyuid and proxypw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"proxyuid":"{{ proxy_zmf_user }}",
  "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is not defined and remote_zmf_password is not defined and proxy_zmf_user is defined and proxy_zmf_password is defined

- name: "Including proxypw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"proxypw":"{{ proxy_zmf_password }}"}'
  when: proxy_zmf_password is defined and proxy_zmf_user is not defined and remote_zmf_user is not defined and remote_zmf_password is not defined

- name: "Including zosmfuid, zosmfpw, proxyuid, and proxypw in the request content body"
  ansible.builtin.set_fact:
    zos_system_uuid_request_body: '{"zosmfuid":"{{ remote_zmf_user }}",
 "zosmfpw":"{{ remote_zmf_password }}", "proxyuid":"{{ proxy_zmf_user }}", "proxypw":"{{ proxy_zmf_password }}"}'
  when: remote_zmf_user is defined and remote_zmf_password is defined and proxy_zmf_user is defined and proxy_zmf_password is defined

- name: "Set the zmf_port if specified"
  ansible.builtin.set_fact:
    zmf_host: '{{ zmf_host }}:{{ zmf_port }}'
  when: zmf_port is defined and ':' not in zmf_host

##########################################################################################
# URI MODULE #1: Obtain the UUID for a z/OS system.                                      #
##########################################################################################

# Start the z/OS system UUID operation.
- name: "Determining the UUID for z/OS system <{{ system_nickname }}>"
  ansible.builtin.uri:
    url: "https://{{ zmf_host }}/zosmf/swmgmt/system/uuid/{{ system_nickname }}"
    return_content: true
    user: "{{ zmf_user | trim }}"
    password: "{{ zmf_password | trim }}"
    force_basic_auth: true
    headers:
      Host: "{{ zmf_host }}"
      Origin: "https://{{ zmf_host }}"
    method: POST
    status_code: 200, 404
    validate_certs: false
    body_format: json
    body: "{{ zos_system_uuid_request_body }}"
  delegate_to: localhost
  register: zos_system_uuid_response

# Save the z/OS system's UUID.
- name: Write the results for the z/OS system UUID operation to a JSON file
  block:
    # Create a variable for the z/OS system UUID.
    - name: Set the z/OS system's UUID
      ansible.builtin.set_fact:
        software_instance_uuid: "{{ zos_system_uuid_response.json['uuid'] }}"
      when: zos_system_uuid_response.status == 200

    # Issue a failure message when user does not have the APAR with the report APIs installed on their system.
    - name: Display z/OS system UUID REST API failure information
      ansible.builtin.fail:
        msg: "There was an error encountered during z/OS system UUID REST API execution. Its possible the host
        system is missing required APAR PH47050 which contains the software instance report REST APIs. Otherwise the
        specified software instance was not found. These are the failure
        details: {{ zos_system_uuid_response.json }}"
      when: zos_system_uuid_response.status == 404

    # Issue a failure message and stop the playbook.
    - name: Display the z/OS system UUID action failure information
      ansible.builtin.fail:
        msg: "z/OS system UUID failure details: {{ zos_system_uuid_response }} "
      when: zos_system_uuid_response.status != 200
